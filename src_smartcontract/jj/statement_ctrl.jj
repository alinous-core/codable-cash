
/******************************************************************************************
* Alinous Language Control Statements Starts
*/

AbstractStatement* ctrlStatement() : {
	AbstractStatement* stmt = nullptr;
}
{
	(
		stmt=ifStatement() |
		stmt=breakStatement() |
		stmt=continueStatement() |
		stmt=returnStatement() |
		stmt=whileStatement()
	)
	{}
	{
		return stmt;
	}
}

WhileStatement* whileStatement() : {
	WhileStatement* stmt = new WhileStatement();
	AbstractExpression* exp = nullptr;
	AbstractStatement* st = nullptr;
	Token* t = nullptr;
}
{
	t="while" {
		stmt->setPosition(t);
	}
	t="(" {
		stmt->setPosition(t);
	}
	
	exp=expression() {
		stmt->setExpression(exp);
		stmt->setPosition(exp);
	}
	
	t=")" {
		stmt->setPosition(t);
	}
	st=statement() {
		stmt->setStatement(st);
		stmt->setPosition(st);
	}
	
	{
		 __ONERROR(stmt);
		return stmt;
	}	
}

ReturnStatement* returnStatement() : {
	ReturnStatement* stmt = new ReturnStatement();
	AbstractExpression* exp = nullptr;
	Token* t = nullptr;
}
{
	t="return" {
		stmt->setPosition(t);
	}
	[
		exp=expression() {
			stmt->setExpression(exp);
			stmt->setPosition(exp);
		}
	]
	t=";" {
		stmt->setPosition(t);
	}
	{
		 __ONERROR(stmt);
		return stmt;
	}
}

ContinueStatement* continueStatement() : {
	ContinueStatement* stmt = new ContinueStatement();
	Token* t = nullptr;
}
{
	t="continue" {
		stmt->setPosition(t);
	}
	t=";" {
		stmt->setPosition(t);
	}
	{
		 __ONERROR(stmt);
		return stmt;
	}	
}


BreakStatement* breakStatement() : {
	BreakStatement* stmt = new BreakStatement();
	Token* t = nullptr;
}
{
	t="break" {
		stmt->setPosition(t);
	}
	t=";" {
		stmt->setPosition(t);
	}
	{
		 __ONERROR(stmt);
		return stmt;
	}	
}

IfStatement* ifStatement() : {
	IfStatement* ifstmt = new IfStatement();
	AbstractExpression* exp;
	AbstractStatement* stmt;
	Token* t = nullptr;
}
{
	t="if" {
		ifstmt->setPosition(t);
	}
	"("
	exp=expression() {
		ifstmt->setExpression(exp);
		ifstmt->setPosition(exp);
	}
	
	")"
	
	stmt=statement() {
		ifstmt->setStatement(stmt);
		ifstmt->setPosition(stmt);
	}
	{
		 __ONERROR(ifstmt);
		return ifstmt;
	}
}


