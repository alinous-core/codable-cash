
/******************************************************************************************
* Alinous Language Starts
*/

CompilationUnit* compilationUnit() :
{
	CompilationUnit* unit = new CompilationUnit();
	PackageDeclare* pkg = nullptr;
	ClassDeclare* clazz = nullptr;
}
{
	[
		pkg=packageDeclare() {
			unit->setPackage(pkg);
		}
	]
    
	(
	    clazz=classDeclare() {
			unit->setPosition(clazz);
			unit->addClassDeclare(clazz);
	    }
	)+
	<EOF>
	{
		return unit;
	}
}

PackageDeclare* packageDeclare() : {
	PackageDeclare* pkg = nullptr;
	PackageNameDeclare* name = nullptr;
	Token* t = nullptr;
}
{
	t="package" {
		pkg=new PackageDeclare();
		pkg->setPosition(t);
	}

	name=packageNameDeclare() {
	    pkg->setName(name);
		pkg->setPosition(name);
	}
	
	";" {
		pkg->setPosition(t);
	}
	{
	    __ONERROR(pkg);
		return pkg;
	}
}

PackageNameDeclare* packageNameDeclare() :
{
	PackageNameDeclare* names = nullptr;
	Token* t = nullptr;
}
{
	t=< IDENTIFIER > {
	    names = new PackageNameDeclare();
		names->addSegment(_STR(t));
		names->setPosition(t);
	}

	(
	    "." t=< IDENTIFIER > {
			names->addSegment(_STR(t));
			names->setPosition(t);
	    }
	)*
	{
	}
	{
	    __ONERROR(names);
		return names;
	}

}

ClassDeclare* classDeclare() :
{
	ClassDeclare* clazz = nullptr;
	Token* cls = nullptr;
	Token* name = nullptr;
	ClassDeclareBlock* block = nullptr;
	
}
{
	cls="class" name=<IDENTIFIER> {
		 clazz = new ClassDeclare();
		 clazz->setName(_STR(name));
	}
	block=classDeclareBlock() {
	    clazz->setPositions(cls, block);
	    clazz->setBlock(block);
	}
	{
	    __ONERROR(clazz);
		return clazz;
	}
}

ClassDeclareBlock* classDeclareBlock() :
{
	ClassDeclareBlock* block = nullptr;
	Token* begin, *end;
	MethodDeclare* method = nullptr;
	MemberVariableDeclare* member = nullptr;
}
{
	begin="{" {
		block = new ClassDeclareBlock();
		block->setPosition(begin);
	}

	( LOOKAHEAD(3)		method=methodDeclare() {

		}
		|
		member=memberVariableDeclare() {

		}
	)*

	
	 end="}"
	{
   		block->setPosition(end);
	}
	{
		__ONERROR(block);
		return block;
	}
}

MethodDeclare* methodDeclare() : {
	Token* t = nullptr;
	AccessControlDeclare* ctrl = nullptr;
	ITypeDeclare* type = nullptr;
}
{
    ctrl=accessControlDeclare()
    
	[t="static"]

	type=typeDeclare()

	< IDENTIFIER >

	t=";" {

	}

}

MemberVariableDeclare* memberVariableDeclare() : {
	Token* t = nullptr;
	AccessControlDeclare* ctrl = nullptr;
	ITypeDeclare* type = nullptr;
	ArgumentsListDeclare* args = nullptr;
}
{
	ctrl=accessControlDeclare()

	[t="static"]

	type=typeDeclare()

	t=< IDENTIFIER >

	args=argumentsListDeclare() {

	}
	t=";" {

	}
	
	{

	}
}

AccessControlDeclare* accessControlDeclare() : {
	Token* t = nullptr;
	AccessControlDeclare* ctrl = new AccessControlDeclare();
}
{
    ( 
		t="public" {
			ctrl->setCtrl(AccessControlDeclare::PUBLIC);
			ctrl->setPositions(_P(t, t));
		}
		|
		t="protected" {
			ctrl->setCtrl(AccessControlDeclare::PROTECTED);
			ctrl->setPositions(_P(t, t));
		}
		|      
		t="private" {
			ctrl->setCtrl(AccessControlDeclare::PRIVATE);
			ctrl->setPositions(_P(t, t));
		}
	)
	{
	}
	{
	    __ONERROR(ctrl);
		return ctrl;
	}
}

ArgumentsListDeclare* argumentsListDeclare() : {
	Token* t = nullptr;
}
{
	t="("

	t=")" {

	}
	{

	}
}



