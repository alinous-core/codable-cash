
/******************************************************************************************
* Alinous Language Expressions Starts
*/






VariableIdentifier* variableIdentifier() : {
	VariableIdentifier* valId = new VariableIdentifier();
	Token* t = nullptr;
}
{
	t=<IDENTIFIER> {
		valId->setName(_STR(t));
	}
	{
		 __ONERROR(valId);
		return valId;
	}
}

AbstractExpression* literal() : {
	AbstractExpression* lit = nullptr;
}
{
	(
		lit=nullLiteral() |
		lit=booleanLiteral() |
		lit=numberLiteral() |
		lit=literalExpression()
	)
	{
	}
	{
		return lit;
	}
}


NullLiteral* nullLiteral() :
{
	NullLiteral* lit = new NullLiteral();
	Token* t = nullptr;
}
{
	t=<_NULL> {
		lit->setPositions(t, t);
	}
	{
		 __ONERROR(lit);
		return lit;
	}
}

NumberLiteral* numberLiteral() : {
	NumberLiteral* lit = new NumberLiteral();
	Token* t = nullptr;
}
{
	t=<INTEGER_LITERAL>
	{
		lit->setValue(_STR(t));
		lit->setPositions(t, t);
	}
	{
		 __ONERROR(lit);
		return lit;
	}
}


BooleanLiteral* booleanLiteral() : {
	BooleanLiteral* lit = new BooleanLiteral();
	Token* t = nullptr;
}
{
	(
		t="true" {
			lit->setValue(true);
		}
		|
		t="false" {
			lit->setValue(false);
		}
	)
	{
		lit->setPositions(t, t);
	}
	{
		 __ONERROR(lit);
		return lit;
	}
}

LiteralExpression* literalExpression() :
{
	LiteralExpression* lit = new LiteralExpression();
	Token* t = nullptr;
}
{
	(
		t=<STRING_LITERAL> {
			lit->setString(_STR(t), true);
		}
		|
		t=<SQL_STRING_LITERAL> {
			lit->setString(_STR(t), false);
		}
	){
		lit->setPositions(t, t);
	}
	{
		 __ONERROR(lit);
		return lit;
	}
}


