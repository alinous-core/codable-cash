options {
JAVA_UNICODE_ESCAPE = true;
UNICODE_INPUT = true;
OUTPUT_LANGUAGE = "c++";
NAMESPACE = "alinouslang";
OUTPUT_DIRECTORY = "src_gen/alinous_lang/";
FORCE_LA_CHECK = false;
ERROR_REPORTING = true;
PARSER_INCLUDES = "sc/alinouslang.h";
//STATIC = false; // ignored by c++
}

PARSER_BEGIN(AlinousLang)

// write includes here

PARSER_END(AlinousLang)

/******************************************************************************************
* Alinous Language Lex
*/

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

<*>TOKEN :
{
	<#NOTASCII: ["\u0080"-"\ufaff"]>	|
	<#ASCILETTER: ["a"-"z"] | ["A"-"Z"] | ["_"]> |
	<#NUMBERLETTER: ["0"-"9"]> |

	
	<#CHARACTOR: <NOTASCII> | <ASCILETTER> | <NUMBERLETTER> >
}

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        <DECIMAL_FLOATING_POINT_LITERAL>
      | <HEXADECIMAL_FLOATING_POINT_LITERAL>
  >
|
  < #DECIMAL_FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<DECIMAL_EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <DECIMAL_EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<DECIMAL_EXPONENT>)? ["f","F","d","D"]
  >
|
  < #DECIMAL_EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < #HEXADECIMAL_FLOATING_POINT_LITERAL:
        "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])+ (".")? <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
      | "0" ["x", "X"] (["0"-"9","a"-"f","A"-"F"])* "." (["0"-"9","a"-"f","A"-"F"])+ <HEXADECIMAL_EXPONENT> (["f","F","d","D"])?
  >
|
  < #HEXADECIMAL_EXPONENT: ["p","P"] (["+","-"])? (["0"-"9"])+ >

|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9","a"-"f","A"-"F"])+
            )
          )
      )
      "'"
  >
|
  < SQL_STRING_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            | "u" (["0"-"9","a"-"f","A"-"F"])+
            )
          )
      )*
      "'"
  >
}

TOKEN :
{
	<SEMI_COLON: ";">		|
	<EQUALS: "=">			|
	<ASTERISK: "*">			|
	<PLUSPLUS: "++">		|
	<PLUS: "+">				|
	<MINUSMINUS: "--">		|
	<MINUS: "-">			|
	<DIV: "/">				|
	<MODULO: "%">			|
	<LOGICAL_AND: "&&">		|
	<LOGICAL_OR: "||">		|
	<BIT_AND: "&">			|
	<BIT_OR: "|">			|
	<L_PARENTHESIS: "(">	|
	<R_PARENTHESIS: ")">	|
	<L_BRACKET: "[">		|
	<R_BRACKET: "]">		|
	<DOLLAR: "$">			|
	<DOT: ".">				|
	<COMMA: ",">			|
	<AT_AT_MARK: "@@">		|
	<AT_MARK: "@">			|
	<L_BRACE: "{">			|
	<R_BRACE: "}">			|
	<CMP_EQUALS: "==">		|
	<CMP_NOTEQUALS: "!=">	|
	< GT: ">" >				|
	<GEQ: ">=">				|
	<LT: "<">				|
	<LEQ: "<=">				|
	<NOT: "!">				|
	<COLON: ":">			|

	<RSIGNEDSHIFT: ">>" >	|
	<RUNSIGNEDSHIFT: ">>>" >
}

TOKEN :
{
<IMPORT: "import">
| <PACKAGE: "package">
| <CLASS: "class">
| <CLASS_INTERFACE: "interface">
| < ABSTRACT: "abstract" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < _CONST: "const" >
| < CONTINUE: "continue" >
| < DO: "do" >
| < ELSE: "else" >
| < ENUM: "enum" >
| < EXTENDS: "extends" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < INSTANCEOF: "instanceof" >
| < NATIVE: "native" >
| < NEW: "new" >
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >

| < TRY: "try" >
| < VOID: "void" >
| < WHILE: "while" >
| <INCLUDE: "include" >
| <DOWNLOAD: "download">
| <REDIRECT: "redirect" >
| <REFERER_FROM : "refer_from">
| <VALIDATOR: "validator">
	
| <PARALLEL: "parallel">
| <LOCAL: "local">
| < TRUE: "true" >
| < FALSE: "false" >
}


TOKEN [IGNORE_CASE] :
{
	<SELECT: "SELECT">	|
	<INSERT: "INSERT">	|
	<UPDATE: "UPDATE">	|
	<DELETE: "DELETE">	|
	<INTO: "INTO">		|
	<FROM: "FROM">		|
	<WHERE: "WHERE">	|
	<OR: "OR">			|
	<SQLAND: "AND">		|
	<LIKE: "LIKE">		|
	<ESCAPE: "<ESCAPE>">	|
	<LEFT: "LEFT">		|
	<RIGHT: "RIGHT">	|
	<NATURAL: "NATURAL">|
	<INNER: "INNER">	|
	<OUTER: "OUTER">	|
	<FULL: "FULL">		|
	<JOIN: "JOIN">		|
	<CROSS: "CROSS">	|
	<SET: "SET">		|
	<VALUES: "VALUES">	|
	<GROUP: "GROUP">	|
	<BY: "BY">			|
	<HAVING: "HAVING">	|
	<ORDER: "ORDER">	|
	<ASC: "ASC">		|
	<DESC: "DESC">		|
	
	<LIMIT: "LIMIT">	|
	<OFFSET: "OFFSET">	|
	<ON: "ON">			|
	<SQL_NOT: "NOT">	|
	<AS: "AS">			|
	<DISTINCT: "DISTINCT">		|
	
	<SHARE: "SHARE">	|
	<NOWAIT: "NOWAIT">	|
	<OF: "OF">			|
	
	<IN: "IN">			|
	<BETWEEN: "BETWEEN">	|
	<IS: "IS">			|
	
	<BEGIN: "BEGIN">	|
	<PREPARE: "PREPARE">	|
	<TRANSACTION: "TRANSACTION">	|
	<ISOLATION: "ISOLATION">	|
	<LEVEL: "LEVEL">	|
	
	<COMMIT: "COMMIT">	|
	<PREPARED: "PREPARED">	|
	<END: "END">		|
	<ROLLBACK: "ROLLBACK">		|

	<CREATE: "CREATE">		|
	<DROP: "DROP">		|
	<ALTER: "ALTER">	|
	<TABLE: "TABLE">	|
	<SQL_DEFAULT: "DEFAULT">	|
	<ADD: "ADD">	|
	<RENAME: "RENAME">	|
	<COLUMN: "COLUMN">	|
	<TO: "TO">	|
	<PRIMARY: "PRIMARY">	|
	<KEY: "KEY">	|
	<UNIQUE: "UNIQUE">	|
	<CHECK: "CHECK">	|
	<RETURNS: "RETURNS">	|
	<SETOF: "SETOF">	|
	<LANGUAGE: "LANGUAGE">	|
	<REPLACE: "REPLACE">	|
	<INDEX: "INDEX">	|
	<USING: "USING">	|
	
	<EACH: "EACH">		|
	<ROW: "ROW">		|
	<STATEMENT: "STATEMENT">|
	<EXECUTE: "EXECUTE">	|
	<PROCEDURE: "PROCEDURE">		|
	<EXISTS: "EXISTS">	|
	
	<TRIGGER: "TRIGGER">	|
	<BEFORE: "BEFORE">	|
	<AFTER: "AFTER">	|
	
	<FOREIGN: "FOREIGN">	|
	<REFERENCES: "REFERENCES">	|
	
	<ADJUST_WHERE: "ADJUST_WHERE">	|
	<ADJUST_SET: "ADJUST_SET">	|
	
	<BOOL: "BOOL">		|
	
	<_NULL: "NULL">		|
	
	<FUNCTION: "FUNCTION">	|

	<USE: "USE" >  |
	<REGION: "REGION"> |
	<PARTITION: "PARTITION" > |
	<SUB: "SUB">		|
	<SERIALIZABLE: "SERIALIZABLE">	|
	<READ: "READ">	|
	<COMMITTED: "COMMITTED">


}

TOKEN :
{
	<IDENTIFIER: <ASCILETTER> (<ASCILETTER> | <NUMBERLETTER>)*>
}

MORE:
{
	< "/*" > :COMM	 |
	< "//" > :L_COMM
}

<L_COMM>SPECIAL_TOKEN:
{
	< "\n" > : DEFAULT
}

<L_COMM>MORE:
{
	< ~[] >
}

<COMM>SPECIAL_TOKEN:
{
	< "*/" > : DEFAULT
}

<COMM>MORE:
{
	< ~[] >
}

/******************************************************************************************
* Alinous Language Starts
*/

CompilationUnit* compilationUnit() :
{
	CompilationUnit* unit = new CompilationUnit();
	PackageDeclare* pkg = nullptr;
	ClassDeclare* clazz = nullptr;
}
{
	[
		pkg=packageDeclare() {
			unit->setPackage(pkg);
		}
	]
    
	(
	    clazz=classDeclare() {
			unit->setPosition(clazz);
			unit->addClassDeclare(clazz);
	    }
	)+
	<EOF>
	{
		return unit;
	}
}

PackageDeclare* packageDeclare() : {
	PackageDeclare* pkg = nullptr;
	Token* t = nullptr;
}
{
	t="package" {
		pkg=new PackageDeclare();
		pkg->setPosition(t);
	}
	
	";" {
		pkg->setPosition(t);
	}
	{
		return pkg;
	}
}

ClassDeclare* classDeclare() :
{
	ClassDeclare* clazz = nullptr;
	Token* cls = nullptr;
	Token* name = nullptr;
	ClassDeclareBlock* block = nullptr;
	
}
{
	cls="class" name=<IDENTIFIER> block=classDeclareBlock() {
        clazz = new ClassDeclare();
	    clazz->setPositions(cls, block);
	    clazz->setBlock(block);
	}
	{
		return clazz;
	}
}

ClassDeclareBlock* classDeclareBlock() :
{
	ClassDeclareBlock* block = nullptr;
	Token* begin, *end;
}
{
	begin="{" end="}"
	{
	    if(!hasError) {
			block = new ClassDeclareBlock();
	   		block->setPositions(_P(begin, end));
	    }

		return block;
	}
}

