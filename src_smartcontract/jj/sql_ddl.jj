
/******************************************************************************************
* SQL Language DDL Statements Starts
*/

AbstractSQLStatement* ddlStatement() : {
	AbstractSQLStatement* stmt = nullptr;
}
{
	(
		stmt=createTableStatement() |
		stmt=dropTableStatement() |
		stmt=alterTableStatement()
	)
	{}
	{
		return stmt;
	}
}

AlterTableStatement* alterTableStatement() : {
	AlterTableStatement* stmt = new AlterTableStatement();
	TableIdentifier* tableId = nullptr;
	AbstractAlterDdlCommand* cmd = nullptr;
	Token* t = null;
}
{
	t=<ALTER>{
		stmt->setPosition(t);
	}
	
	t=<TABLE>{
		stmt->setPosition(t);
	}
	
	tableId=tableIdentifier() {
		stmt->setPosition(tableId);
		stmt->setTableId(tableId);
	}
	
	(
		(
			cmd=addAlterCommands() {
				stmt->setPosition(cmd);
				stmt->setCommand(cmd);
			}
		)
		|
		(
			t=<DROP>{
				stmt->setPosition(t);
			}
			(
				(
					t=<INDEX>{
						stmt->setPosition(t);
					}
				)
				|
				(
					[t=<COLUMN>{
						stmt->setPosition(t);
					}]
					t=<IDENTIFIER>{
					
					}				
				)
			)
		)

	)
	
	t=";" {
		stmt->setPosition(t);
	}	
	{
		__ONERROR(stmt);
		return stmt;
	}
}




AbstractAlterDdlCommand* addAlterCommands() : {
	AbstractAlterDdlCommand* cmd = nullptr;
	Token* t = nullptr;
}
{
	t=<ADD>
	(
		(
			cmd=alterAddIndexCommand(t) {
				cmd->setPosition(t);
			}
		)
		|
		(
			cmd=alterAddColumnCommand(t) {
				cmd->setPosition(t);
			}
		)
	)
	{
		__ONERROR(cmd);
		return cmd;
	}
}

AlterAddColumnCommand* alterAddColumnCommand(Token* t) : {
	AlterAddColumnCommand* cmd = new AlterAddColumnCommand();
	DdlColumnDescriptor* desc = nullptr;
	cmd->setPosition(t);
}
{
	[t=<COLUMN>{
		cmd->setPosition(t);
	}]
	
	desc=ddlColumnDescriptor() {
		cmd->setPosition(desc);
		cmd->setColumnDescriptor(desc);
	}
	
	{
		__ONERROR(cmd);
		return cmd;
	}
}

AlterAddIndexCommand* alterAddIndexCommand(Token* t) : {
	AlterAddIndexCommand* cmd = new AlterAddIndexCommand();
	cmd->setPosition(t);
}
{
	[
		t=<UNIQUE>{
			cmd->setPosition(t);
		}
	]

	t=<INDEX>{
		cmd->setPosition(t);
	}
	t=<IDENTIFIER>{
		cmd->setPosition(t);
		cmd->setName(_STR(t));
	}
	t="(" {
		cmd->setPosition(t);
	}
	
	t=<IDENTIFIER> {
		cmd->setPosition(t);
		cmd->addColumn(_STR(t));
	}
	(
		t="," {
			cmd->setPosition(t);
		}
		t=<IDENTIFIER> {
			cmd->setPosition(t);
			cmd->addColumn(_STR(t));
		}
	)*
	
	
	t=")" {
		cmd->setPosition(t);
	}

	{
		__ONERROR(cmd);
		return cmd;
	}
}


CreateTableStatement* createTableStatement() : {
	CreateTableStatement* stmt = new CreateTableStatement();
	DdlColumnDescriptor* desc = nullptr;
	Token* t = null;
}
{
	t=<CREATE>{
		stmt->setPosition(t);
	}
	t=<TABLE>{
		stmt->setPosition(t);
	}
	t=<IDENTIFIER> {
		stmt->setName(_STR(t));
		stmt->setPosition(t);
	}
	t=<L_PARENTHESIS> {
		stmt->setPosition(t);
	}
	
	[
		// columns
		desc=ddlColumnDescriptor() {
			stmt->addColumn(desc);
			stmt->setPosition(desc);
		}
		
		(LOOKAHEAD(2)
			t="," {
				stmt->setPosition(t);
			}
			desc=ddlColumnDescriptor() {
				stmt->addColumn(desc);
				stmt->setPosition(desc);
			}
		)*
	]
	
	[
		[t=","]
		t=<PRIMARY> {stmt->setPosition(t);}
		t=<KEY> {stmt->setPosition(t);}
		
		t=<L_PARENTHESIS> {
			stmt->setPosition(t);
		}
		
		t=<IDENTIFIER> {
			stmt->addPrimaryKey(_STR(t));
			stmt->setPosition(t);
		}
		
		(
			t="," {
				stmt->setPosition(t);
			}
			t=<IDENTIFIER> {
				stmt->addPrimaryKey(_STR(t));
				stmt->setPosition(t);
			}
		)*
		
		t=<R_PARENTHESIS> {
			stmt->setPosition(t);
		}
	]
	
	t=<R_PARENTHESIS> {
		stmt->setPosition(t);
	}
	
	t=";" {
		stmt->setPosition(t);
	}
	{
		__ONERROR(stmt);
		return stmt;
	}	
}

DdlColumnDescriptor* ddlColumnDescriptor() :
{
	DdlColumnDescriptor* desc = new DdlColumnDescriptor();
	ColumnTypeDescriptor* typeDesc = nullptr;
	AbstractSQLExpression* val = nullptr;
	Token* t = nullptr;
}
{
	t=<IDENTIFIER> {
		desc->setName(_STR(t));
		desc->setPosition(t);
	}
	typeDesc=columnTypeDescriptor() {
		desc->setColumnType(typeDesc);
		desc->setPosition(typeDesc);
	}
	[
		t=<SQL_NOT> {
			desc->setPosition(t);
		}
		t=<_NULL> {
			desc->setNotNull(true);
			desc->setPosition(t);
		}
	]
	[
		t=<UNIQUE> {
			desc->setUnique(true);
			desc->setPosition(t);
		}
	]
	[
		t=<SQL_DEFAULT> {
			desc->setPosition(t);
		}
		(val=sqlLiteral() | val=sqlBooleanLiteral()) {
			desc->setDefaultValue(val);
			desc->setPosition(val);
		}		
	]
	{
		__ONERROR(desc);
		return desc;
	}	
}

ColumnTypeDescriptor* columnTypeDescriptor() :
{
	ColumnTypeDescriptor* typeDesc = new ColumnTypeDescriptor();
	AbstractSQLExpression* val = nullptr;
	Token* t1 = nullptr;
	Token* t2 = nullptr;
}
{
	(t1=<IDENTIFIER> | t1=<INT> | t1=<BYTE> | t1=<SHORT> | t1=<LONG>) {
		typeDesc->setTypeName(_STR(t1));
		typeDesc->setPosition(t1);
	}
	[
		t2=<L_PARENTHESIS> {
			typeDesc->setPosition(t2);
		}
		
		(val=sqlLiteral() | val=sqlBooleanLiteral()){
			typeDesc->setLength(val);
			typeDesc->setPosition(val);
		}
		
		t2=<R_PARENTHESIS> {
			typeDesc->setPosition(t2);
		}
	]
	{
		__ONERROR(typeDesc);
		return typeDesc;
	}	
}

DropTableStatement* dropTableStatement() : {
	DropTableStatement* stmt = new DropTableStatement();
	Token* t = null;
	TableIdentifier* tableId = nullptr;
}
{
	t=<DROP>{
		stmt->setPosition(t);
	}
	t=<TABLE>{
		stmt->setPosition(t);
	}
	
	tableId=tableIdentifier() {
		stmt->setTableId(tableId);
		stmt->setPosition(tableId);
	}
	
	t=";" {
		stmt->setPosition(t);
	}
	{
		__ONERROR(stmt);
		return stmt;
	}	
}
