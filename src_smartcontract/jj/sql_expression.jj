
/******************************************************************************************
* SQL Language Expressions Starts
*/

AbstractSQLExpression* sqlExpression() : {
	AbstractSQLExpression* exp = nullptr;
}
{
	(
		exp=sqlInExpression()
	)
	{}
	{
		return exp;
	}
}

AbstractSQLExpression* sqlInExpression() : {
	SQLInExpression* exp = nullptr;
	Token* t = nullptr;
	AbstractSQLExpression* left = nullptr;
	SQLExpressionList* list = nullptr;
}
{
	
	left=sqlPrimitiveExpression()
	[
		t=<IN> {
			exp = new SQLInExpression();
			exp->setLeft(left);
			
			exp->setPosition(left);
			exp->setPosition(t);
			left = exp;
		}
		t="(" {
			exp->setPosition(t);
		}
		
		list=sqlExpressionList() {
			exp->setList(list);
		}
		
		t=")" {
			exp->setPosition(t);
		}
	]
	{
		__ONERROR(left);
		return left;
	}
}

AbstractSQLExpression* sqlPrimitiveExpression() : {
	AbstractSQLExpression* exp = nullptr;
}
{
	(
		exp=sqlParenthesisExpression() |
		exp=sqlLiteral() |
		LOOKAHEAD(2) exp = sqlFunctionCall() |
		exp=sqlBooleanLiteral() |
		exp=sqlColumnIdentifier() |
		exp=sqlPlaceHolder()
	)
	{}
	{
		return exp;
	}
}

SQLFunctionCall* sqlFunctionCall() : {
	SQLFunctionCall* exp = new SQLFunctionCall();
	Token* t = nullptr;
	VariableIdentifier* name = nullptr;
}
{
	name=variableIdentifier() {
		exp->setName(name);
		exp->setPosition(name);
	}
	t="(" {
		exp->setPosition(t);
	}
	
	sqlFunctionCallArguments(exp)
	
	t=")" {
		exp->setPosition(t);
	}
	
	{
		__ONERROR(exp);
		return exp;
	}
}

void sqlFunctionCallArguments(SQLFunctionCall* exp) : {
	AbstractSQLExpression* ex = nullptr;
	Token* t = nullptr;
}
{
	[
		ex=sqlExpression() {
			exp->addArgument(ex);
			exp->setPosition(ex);
		}
		
		(
			"," {
				exp->setPosition(t);
			}
			ex=sqlExpression() {
				exp->addArgument(ex);
				exp->setPosition(ex);
			}
			
		)*
	]
}

SQLPlaceHolder* sqlPlaceHolder() : {
	SQLPlaceHolder* exp = new SQLPlaceHolder();
	Token* t = nullptr;
	AbstractExpression* ex = nullptr;
}
{
	t="$" {
		exp->setPosition(t);
	}
	t="{" {
		exp->setPosition(t);
	}
	
	ex=expression() {
		exp->setExpression(ex);
	}
	
	t="}" {
		exp->setPosition(t);
	}
	{
		__ONERROR(exp);
		return exp;
	}
}


SQLParenthesisExpression* sqlParenthesisExpression() : {
	SQLParenthesisExpression* exp = new SQLParenthesisExpression();
	Token* t = nullptr;
	AbstractSQLExpression* ex = nullptr;
}
{
	t="(" {
		exp->setPosition(t);
	}
	
	ex=sqlExpression() {
		exp->setExpression(ex);
		exp->setPosition(ex);
	}

	t=")" {
		exp->setPosition(t);
	}
	{
		__ONERROR(exp);
		return exp;
	}
}

SQLLiteral* sqlLiteral() : {
	SQLLiteral* exp = new SQLLiteral();
	Token* t = nullptr;
}
{
	(
		t=<INTEGER_LITERAL> {
			exp->setValue(_STR(t), SQLLiteral::TYPE_NUMBER);
			exp->setPosition(t);
		}
		|
		t=<SQL_STRING_LITERAL> {
			exp->setValue(_STR(t), SQLLiteral::TYPE_STRING);
			exp->setPosition(t);
		}
	)
	{}
	{
		__ONERROR(exp);
		return exp;
	}
}

SQLBooleanLiteral* sqlBooleanLiteral() : {
	SQLBooleanLiteral* exp = new SQLBooleanLiteral();
	Token* t = nullptr;
}
{
	(
		t=<TRUE> {
			exp->setValue(true);
			exp->setPosition(t);
		}
		|
		t= <FALSE> {
			exp->setValue(false);
			exp->setPosition(t);
		}
	)
	{}
	{
		__ONERROR(exp);
		return exp;
	}
}

SQLColumnIdentifier* sqlColumnIdentifier() : {
	SQLColumnIdentifier* exp = new SQLColumnIdentifier();
	Token* t = nullptr;
	Token* t1 = nullptr;
	Token* t2 = nullptr;
	Token* t3 = nullptr;
}
{
	t1=<IDENTIFIER> {
		exp->setPosition(t1);
	}
	[
		t="." {
			exp->setPosition(t);
		}
		t2=<IDENTIFIER> {
			exp->setPosition(t2);
		}
		[
			t="." {
				exp->setPosition(t);
			}
			t3=<IDENTIFIER> {
				exp->setPosition(t3);
			}
		]
	]
	{
		if(t3 != nullptr){
			exp->setSchema(_STR(t1));
			exp->setTableName(_STR(t2));
			exp->setColumnName(_STR(t3));
		}
		if(t2 != nullptr){
			exp->setTableName(_STR(t1));
			exp->setColumnName(_STR(t2));
		}
		else{
			exp->setColumnName(_STR(t1));
		}
	}
	{
		__ONERROR(exp);
		return exp;
	}
}

/******************************************************************************************
* SQL Language Expressions Special Part Starts
*/

SQLExpressionList* sqlExpressionList() : {
	SQLExpressionList* exp = new SQLExpressionList();
	Token* t = nullptr;
	AbstractSQLExpression* ex = nullptr;
}
{
	ex=sqlExpression() {
		exp->addExpression(ex);
		exp->setPosition(ex);
	}
	(
		"," {
			exp->setPosition(t);
		}
		ex=sqlExpression() {
			exp->addExpression(ex);
			exp->setPosition(ex);
		}
		
	)*
	{}
	{
		__ONERROR(exp);
		return exp;
	}	
}

TableIdentifier* tableIdentifier() : {
	TableIdentifier* exp = new TableIdentifier();
	Token* t = nullptr;
	Token* t1 = nullptr;
	Token* t2 = nullptr;
}
{
	t1=<IDENTIFIER> {
		exp->setPosition(t1);
	}
	[
		t="." {
			exp->setPosition(t);
		}
		t2=<IDENTIFIER> {
			exp->setPosition(t2);
		}
	]
	{
		if(t2 != nullptr){
			exp->setSchema(_STR(t1));
			exp->setTableName(_STR(t2));
		}
		else{
			exp->setTableName(_STR(t1));
		}
	}
	{
		__ONERROR(exp);
		return exp;
	}
}
