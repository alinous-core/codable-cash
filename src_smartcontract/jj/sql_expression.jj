
/******************************************************************************************
* SQL Language Expressions Starts
*/

SQLLiteral* sqlLiteral() : {
	SQLLiteral* exp = new SQLLiteral();
	Token* t = nullptr;
}
{
	(
		t=<INTEGER_LITERAL> {
			exp->setValue(_STR(t), SQLLiteral::TYPE_NUMBER);
			exp->setPosition(t);
		}
		|
		t=<SQL_STRING_LITERAL> {
			exp->setValue(_STR(t), SQLLiteral::TYPE_STRING);
			exp->setPosition(t);
		}
	)
	{}
	{
		__ONERROR(exp);
		return exp;
	}
}

SQLBooleanLiteral* sqlBooleanLiteral() : {
	SQLBooleanLiteral* exp = new SQLBooleanLiteral();
	Token* t = nullptr;
}
{
	(
		t=<TRUE> {
			exp->setValue(true);
			exp->setPosition(t);
		}
		|
		t= <FALSE> {
			exp->setValue(false);
			exp->setPosition(t);
		}
	)
	{}
	{
		__ONERROR(exp);
		return exp;
	}
}

SQLColumnIdentifier* sqlColumnIdentifier() : {
	SQLColumnIdentifier* exp = new SQLColumnIdentifier();
	Token* t = nullptr;
	Token* t1 = nullptr;
	Token* t2 = nullptr;
	Token* t3 = nullptr;
}
{
	t1=<IDENTIFIER> {
		exp->setPosition(t1);
	}
	[
		t="." {
			exp->setPosition(t);
		}
		t2=<IDENTIFIER> {
			exp->setPosition(t2);
		}
		[
			t="." {
				exp->setPosition(t);
			}
			t3=<IDENTIFIER> {
				exp->setPosition(t3);
			}
		]
	]
	{
		if(t3 != nullptr){
			exp->setSchema(_STR(t1));
			exp->setTableName(_STR(t2));
			exp->setColumnName(_STR(t3));
		}
		if(t2 != nullptr){
			exp->setTableName(_STR(t1));
			exp->setColumnName(_STR(t2));
		}
		else{
			exp->setColumnName(_STR(t1));
		}
	}
	{
		__ONERROR(exp);
		return exp;
	}
}

TableIdentifier* tableIdentifier() : {
	TableIdentifier* exp = new TableIdentifier();
	Token* t = nullptr;
	Token* t1 = nullptr;
	Token* t2 = nullptr;
}
{
	t1=<IDENTIFIER> {
		exp->setPosition(t1);
	}
	[
		t="." {
			exp->setPosition(t);
		}
		t2=<IDENTIFIER> {
			exp->setPosition(t2);
		}
	]
	{
		if(t2 != nullptr){
			exp->setSchema(_STR(t1));
			exp->setTableName(_STR(t2));
		}
		else{
			exp->setTableName(_STR(t1));
		}
	}
	{
		__ONERROR(exp);
		return exp;
	}
}
